/*
    函数
*/

/*
    声明
    Rust中函数和变量名都使用snake case（小写字母+下划线）命名
    Rust 不关心函数定义所在的位置，只要函数被调用时出现在调用之处可见的作用域内就行


    参数
    函数签名中，必须声明每个参数的类型。


    语句和表达式
    函数体由一系列语句 和 一个可选的结尾表达式组成。

    语句：执行一些操作但不返回值的指令。
    表达式：计算并产生一个值。

    函数调用是一个表达式
    宏调用是一个表达式
    用大括号创建的一个新的块作用域也是一个表达式

    这是一个表达式
    {
        let x = 3;
        x + 1
    }
    表达式的结尾没有分号。如果在表达式的结尾加上分号，它就变成了语句，而语句不会返回值
*/

// 程序入口
fn main() {
    println!("Hello, world!");

    another_function();
    two_function(11);
    three_function(12, "zhq");

    println!("5 is {}", five());
}

fn another_function() {
    println!("另一个函数");
}

fn two_function(x: i32) {
    println!("另一个函数 {}", x);
}

fn three_function(x: i32, y: &str) {
    println!("另一个函数 {0} {1}", x, y);
}

/*
具有返回值的函数

箭头（->）后声明它的类型

在 Rust 中，函数的返回值等同于函数体最后一个表达式的值
使用 return 关键字和指定值，可从函数中提前返回；但大部分函数隐式的返回最后的表达式
*/
fn five() -> i32 {
    5
}
